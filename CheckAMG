#!/usr/bin/env python3

import argparse
import textwrap
import sys
import psutil
from scripts import checkAMG_ASCII, CheckAMG_build, CheckAMG_annotate

available_memory_gb = psutil.virtual_memory().available / (1024 ** 3) # Get available memory in GB

class CustomHelpFormatter(argparse.ArgumentDefaultsHelpFormatter):
     def _fill_text(self, text, width, indent):
          text = textwrap.dedent(text).strip()
          return textwrap.fill(text, width, initial_indent=indent, subsequent_indent=indent)

def main():
     parser = argparse.ArgumentParser(description="CheckAMG: automated identification and curation of Auxiliary Metabolic Genes (AMGs),"
                                                  " Auxiliary Regulatory Genes (AReGs), and Auxiliary Physiology Genes (APGs)"
                                                  " in viral genomes.", formatter_class=CustomHelpFormatter)
     subparsers = parser.add_subparsers(help="CheckAMG modules", dest="command")

     download_parser = subparsers.add_parser(
          "download",
          help="Download the databases required by CheckAMG.",
          description="Download the databases required by CheckAMG.",
          formatter_class=CustomHelpFormatter)

     annotate_parser = subparsers.add_parser("annotate",
                                        help="Predict and curate auxiliary genes in viral genomes based on functional annotations and genomic context.",
                                        description="Predict and curate auxiliary genes in viral genomes based on functional annotations and genomic context.",
                                        formatter_class=CustomHelpFormatter)

     annotate_required = annotate_parser.add_argument_group('required arguments')
     annotate_required.add_argument("-d", "--db_dir", type=str, required=True,
                              help="Path to CheckAMG database files (Required).")
     annotate_required.add_argument("-o", "--output", type=str, required=True,
                              help="Output directory for all generated files and folders (Required).")
     annotate_required.add_argument("-g", "--genomes", type=str, required=False,
                              help="Input viral genome(s) in nucleotide fasta format (.fna or .fasta). Expectation is that "
                                   "individual virus genomes are single contigs.")
     annotate_required.add_argument("-vg", "--vmags", type=str, required=False,
                              help="Path to folder containing vMAGs (multiple contigs) rather than single-contig viral genomes. "
                                   "Expectation is that the folder contains one .fna or .fasta file "
                                   "per virus genome and that each genome contains multiple contigs.")
     annotate_required.add_argument("-p", "--proteins", type=str, required=False,
                              help="Input viral genome(s) in amino-acid fasta format (.faa or .fasta). Required if --input_type is prot. "
                                   "Expectations are that the amino-acid sequence headers are in Prodigal format (>[CONTIG NAME]_[CDS NUMBER] # START # END # FRAME # ...) "
                                   "and that each contig encoding proteins represents a single virus genome.")
     annotate_required.add_argument("-vp", "--vmag_proteins", type=str, required=False,
                              help="Path to folder containing vMAGs (multiple contigs) in amino-acid fasta format (.faa or .fasta) "
                                   "rather than single-contig viral genomes. Expectation is that the folder contains one .faa or .fasta file "
                                   "per virus genome and that each genome file contains amino-acid sequences encoded on multiple contigs. "
                                   "Required if --input_type is 'prot'.")
          
     annotate_parser.add_argument("--input_type", type=str, required=False, default="nucl",
                              help="Specifies whether the input files are nucleotide genomes (nucl) or translated amino-acid genomes (prot). "
                                   "Providing proteins as input will skip the pyrodigal-gv step, "
                                   "but it will be unable to tell whether viral genomes are circular, potentially losing additional evidence "
                                   "for verifying the viral origin of putative auxiliary genes. (default: %(default)s).")
     annotate_parser.add_argument("-l", "--min_len", type=int, required=False, default = 5000,
                              help="Minimum length in base pairs for input sequences (default: %(default)s).")
     annotate_parser.add_argument("-f", "--min_orf", type=int, required=False, default = 4,
                              help="Minimum number of open reading frames (proteins) inferred by pyrodigal-gv for input sequences (default: %(default)s).")
     annotate_parser.add_argument("-n", "--min_annot", type=float, required=False, default=0.20,
                              help="Minimum percentage (0.0-1.0) of genes in a genome/contig required to have been assigned a "
                                   "functional annotation using the CheckAMG database to be considered for contextual analysis. "
                                   "(default: %(default)s).")
     annotate_parser.add_argument("-c", "--cov_fraction", type=float, required=False, default=0.5,
                              help="Minimum covered fraction for HMM alignments (default: %(default)s).")
     annotate_parser.add_argument("-L", "--min_window_avg_Lscore", type=float, required=False, default=3.0,
                              help="Minimum average VL-score of all genes on a window required for a window to be considered potentially viral (default: %(default)s).")
     annotate_parser.add_argument("-Z", "--window_size", type=int, required=False, default=10000,
                              help="Size in base pairs of the window used to calculate the average VL-score of genes on a contig (default: %(default)s).")
     annotate_parser.add_argument("-F", "--max_flank", type=int, required=False, default=10000,
                              help="Maximum length in base pairs to check on the left/right flanks of potentially auxiliary genes when checking for virus-like genes and non-virus-like genes (default: %(default)s).")
     annotate_parser.add_argument("-V", "--min_flank_Vscore", type=float, required=False, default=10.0,
                              help="Minimum V-score of genes in flanking regions required to verify a potential auxiliary gene as viral and not host sequence contamination (0.0-10.0) (default: %(default)s).")
     annotate_parser.add_argument("-H", "--use_hallmark", required=False, default=False, action=argparse.BooleanOptionalAction,
                              help="Use viral hallmark gene annotations instead of V-scores when chekcing flanking regions of potential auxiliary genes for viral verification (default: %(default)s).")
     annotate_parser.add_argument("-t", "--threads", type=int, required=False, default=10,
                              help="Number of threads to use for pyrodigal-gv and pyhmmer (default: %(default)s).")
     annotate_parser.add_argument("-m", "--mem", type=int, required=False, default=round(available_memory_gb*0.80), # 80% of available memory
                              help="Maximum amount of memory allowed to be allocated in GB (default: 80%% of available [%(default)s]).")
     annotate_parser.add_argument("--debug", required=False, default=False, action=argparse.BooleanOptionalAction,
                              help="Log CheckAMG genome with debug-level detail (default: %(default)s).")

     de_novo_parser = subparsers.add_parser(
          "de-novo",
          help="Predict auxiliary genes with an annotation-independent method using a protein-based genome language model (Protein Set Transformer).",
          description="Predict auxiliary genes with an annotation-independent method using a protein-based genome language model (Protein Set Transformer).",
          formatter_class=CustomHelpFormatter)

     aggregate_parser = subparsers.add_parser(
          "aggregate",
          help="Aggregate the results of the CheckAMG annotate and de-novo modules to produce a final report of auxiliary gene predictions.",
          description="Aggregate the results of the CheckAMG annotate and de-novo modules to produce a final report of auxiliary gene predictions.",
          formatter_class=CustomHelpFormatter)
          
     end_to_end_parser = subparsers.add_parser(
          "end-to-end",
          help="Executes CheckAMG annotate, de-novo, and aggregate in tandem.",
          description="Executes CheckAMG annotate, de_novo, and aggregate in tandem.",
          formatter_class=CustomHelpFormatter)
     
     build_parser = subparsers.add_parser(
          "build", help="Build a statistically-supported, automatically-curated auxiliary gene database.",
          description="Build a statistically-supported, automatically-curated auxiliary gene database.",
          formatter_class=CustomHelpFormatter)

     build_required = build_parser.add_argument_group('required arguments')
     build_required.add_argument("-d", "--db_dir", type=str, required=True,
                              help="Path to CheckAMG database files (Required).")
     build_required.add_argument("-o", "--output", type=str, required=True,
                              help="Output directory for all generated files and folders (Required).")
     build_required.add_argument("-g", "--genomes", type=str, required=False,
                              help="Input viral genome(s) in nucleotide fasta format (.fna or .fasta). Expectation is that "
                                   "individual virus genomes are single contigs.")
     build_required.add_argument("-v", "--vmags", type=str, required=False,
                              help="Path to folder containing vMAGs (multiple contigs) rather than single-contig viral genomes. "
                                   "Expectation is that the folder contains one .fna or .fasta file "
                                   "per virus genome and that each genome contains multiple contigs.")

     build_parser.add_argument("-l", "--min_len", type=int, required=False, default = 5000,
                              help="Minimum length in base pairs for input sequences (default: %(default)s).")
     build_parser.add_argument("-f", "--min_orf", type=int, required=False, default = 4,
                              help="Minimum number of open reading frames (proteins) inferred by pyrodigal-gv for input sequences (default: %(default)s).")
     build_parser.add_argument("--sensitivity", type=float, required=False, default=7.5,
                              help="MMseqs2 maximum search sensitivity (default: %(default)s).")
     build_parser.add_argument("--min_seq_id", type=float, required=False, default=0.5,
                              help="MMseqs2 minimum sequence identity (default: %(default)s).")
     build_parser.add_argument("-c", "--cov_fraction", type=float, required=False, default=0.5,
                              help="Minimum covered fraction for MMseqs2 and HMM alignments (default: %(default)s).")
     build_parser.add_argument("-r", "--cluster_ranks", type=str, required=False, default="class,family,genus",
                              help="Comma-separated list of taxonomic level(s) at which to cluster genomes. Can provide a "
                                   "single rank or multiple. If multiple ranks are provided, they must be in order class > "
                                   "family > genus > species (default: %(default)s). Choices: class, family, genus, species.")
     build_parser.add_argument("-a", "--confidence_levels", type=str, required=False, default="high",
                              help="Comma-separated list of the levels of confidence (that a given protein is of viral origin) to use "
                                   "for the final database. Can provide a single level or multiple. If multiple levels are provided, they must "
                                   "be in order high > medium > low (default: %(default)s, e.g. high,medium). Choices: high, medium, low.")
     build_parser.add_argument("-x", "--exclude_singletons", required=False, default=True, action=argparse.BooleanOptionalAction,
                              help="Exclude proteins from genomes that did not cluster with any other genomes (singleton genomes) "
                              "and proteins that did not cluster with any other proteins (singleton proteins) before calculating "
                              "auxiliary scores. This will prevent the final database from being over-saturated with proteins that "
                              "were predicted to be auxiliary merely because they were underrepresented in the starting database "
                              "(but it will also remove truly 'one-of-a-kind' proteins) (default: %(default)s).")
     build_parser.add_argument("-n", "--min_annot", type=float, required=False, default=0.20,
                              help="Minimum percentage (0.0-1.0) of genes in a genome/contig required to have been assigned a "
                                   "functional annotation using the CheckAMG database to be considered for contextual analysis. "
                                   "(default: %(default)s).")
     build_parser.add_argument("-L", "--min_window_avg_Lscore", type=float, required=False, default=3.0,
                              help="Minimum average VL-score of all genes on a window required for a window to be considered potentially viral (default: %(default)s).")
     build_parser.add_argument("-Z", "--window_size", type=int, required=False, default=10000,
                              help="Size in base pairs of the window used to calculate the average VL-score of genes on a contig (default: %(default)s).")
     build_parser.add_argument("-F", "--max_flank", type=int, required=False, default=10000,
                              help="Maximum length in base pairs to check on the left/right flanks of potentially auxiliary genes when checking for virus-like genes and non-virus-like genes (default: %(default)s).")
     build_parser.add_argument("-V", "--min_flank_Vscore", type=float, required=False, default=10.0,
                              help="Minimum V-score of genes in flanking regions required to verify a potential auxiliary gene as viral and not host sequence contamination (0.0-10.0) (default: %(default)s).")
     build_parser.add_argument("-H", "--use_hallmark", required=False, default=False, action=argparse.BooleanOptionalAction,
                              help="Use viral hallmark gene annotations instead of V-scores when checking flanking regions of potential auxiliary genes for viral verification (default: %(default)s).")
     build_parser.add_argument("--hmm_prefix", type=str, required=False, default="custom",
                              help="Prefix for generated HMM profile accessions (default: %(default)s).")
     build_parser.add_argument("-t", "--threads", type=int, required=False, default=10,
                              help="Maximum number of threads to use (default: %(default)s).")
     build_parser.add_argument("-m", "--mem", type=int, required=False, default=round(available_memory_gb*0.80), # 80% of available memory
                              help="Maximum amount of memory allowed to be allocated in GB (default: 80%% of available [%(default)s]).")
     build_parser.add_argument("--debug", required=False, default=False, action=argparse.BooleanOptionalAction,
                              help="Log CheckAMG build with debug-level detail (default: %(default)s).")

     args = parser.parse_args()
     if args.command == "download":
          print("Database download functionality will be implemented here.")
     elif args.command == "build":
          if not args.genomes and not args.vmags:
               parser.error("At least one of --genomes or --vmags is required.")
          CheckAMG_build.create_output_dir(args.output)
          config_path = CheckAMG_build.generate_config(args)
          CheckAMG_build.run_snakemake(config_path, args)
     elif args.command == "annotate":
          if args.input_type == "nucl" and not args.genomes and not args.vmags:
               parser.error("At least one of --genomes or --vmags is required when --input_type is 'nucl'.")
          if args.input_type == "nucl" and (args.proteins or args.vmag_proteins):
               parser.error("Cannot provide --proteins or --vmag_proteins when --input_type is 'nucl'.")
          if args.input_type == "prot" and not args.proteins and not args.vmag_proteins:
               parser.error("At least one of --proteins or --vmag_proteins is required when --input_type is 'prot'.")
          if args.input_type == "prot" and (args.genomes or args.vmags):
               parser.error("Cannot provide --genomes or --vmags when --input_type is 'prot'.")
          if (args.genomes and args.proteins) or (args.vmags and args.vmag_proteins):
               parser.error("Cannot provide both --genomes/--vmags and --proteins/--vmag_proteins.")
          CheckAMG_annotate.create_output_dir(args.output)
          config_path = CheckAMG_annotate.generate_config(args)
          CheckAMG_annotate.run_snakemake(config_path, args)
     elif args.command == "de-novo":
          print("CheckAMG de novo functionality will be implemented here.")
     elif args.command == "aggregate":
          print("CheckAMG aggregate functionality will be implemented here.")
     elif args.command == "end-to-end":
          print("CheckAMG end-to-end pipeline functionality will be implemented here.")
     else:
          print("Error: Please specify a CheckAMG module to run.", file=sys.stderr)
          parser.print_help()
          sys.exit(1)

if __name__ == "__main__":
     print(checkAMG_ASCII.ASCII)
     sys.stdout.flush()
     main()

